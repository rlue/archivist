#!/usr/bin/env ruby
# frozen_string_literal: true

require 'archivist'
require 'pathname'

Archivist::Config.parse_opts!
Archivist::Logger.open

# Setup ------------------------------------------------------------------------
Archivist::Logger.debug("mounting #{Archivist::Config.volume}") if Archivist::Config.volume
system("mount #{Archivist::Config.volume}") if Archivist::Config.volume

SRC_DIR  = Pathname(Archivist::Config.source)
DEST_DIR = Pathname(Archivist::Config.dest)

begin
  raise "#{Archivist::Config.source}: no such directory" unless SRC_DIR.exist?
  raise "#{Archivist::Config.dest}: no such directory" unless DEST_DIR.exist?

  if Dir.empty?(SRC_DIR)
    if Archivist::Config.volume
      Archivist::Logger.debug("unmounting #{Archivist::Config.volume}")
      system("umount #{Archivist::Config.volume}")
    end

    raise "#{Archivist::Config.source}: no photos or videos found"
  end
rescue => e
  Archivist::Logger.fatal(e.message)
  exit 1
end

# Core Logic -------------------------------------------------------------------
image_formats = Archivist::Image::SUPPORTED_FORMATS
  .zip(Archivist::Image::SUPPORTED_FORMATS.map(&:upcase))
  .flatten

SRC_DIR
  .join(Archivist::Config.recursive ? '**' : '')
  .join("*{#{image_formats.join(',')}}")
  .then { |glob| Dir[glob].sort }
  .map(&Archivist::Image.method(:new))
  .each(&:import)

# Video compression is time-consuming, so save it for last
video_formats = Archivist::Video::SUPPORTED_FORMATS
  .zip(Archivist::Video::SUPPORTED_FORMATS.map(&:upcase))
  .flatten

SRC_DIR
  .join(Archivist::Config.recursive ? '**' : '')
  .join("*{#{video_formats.join(',')}}")
  .then { |glob| Dir[glob].sort }
  .map(&Archivist::Video.method(:new))
  .each(&:import)

# Cleanup ----------------------------------------------------------------------
unless Archivist::Config.keep
  Dir[SRC_DIR.join('**/')].sort
    .drop(1)
    .reverse_each { |d| Dir.rmdir(d) if Dir.empty?(d) }
end

Archivist::Logger.debug("unmounting #{Archivist::Config.volume}") if Archivist::Config.volume
system("umount #{Archivist::Config.volume}") if Archivist::Config.volume
